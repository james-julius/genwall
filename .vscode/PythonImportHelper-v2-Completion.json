[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "stability_sdk",
        "description": "stability_sdk",
        "isExtraImport": true,
        "detail": "stability_sdk",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "schedule",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schedule",
        "description": "schedule",
        "detail": "schedule",
        "documentation": {}
    },
    {
        "label": "inquirer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inquirer",
        "description": "inquirer",
        "detail": "inquirer",
        "documentation": {}
    },
    {
        "label": "geocoder",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "geocoder",
        "description": "geocoder",
        "detail": "geocoder",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "applescript",
        "description": "applescript",
        "isExtraImport": true,
        "detail": "applescript",
        "documentation": {}
    },
    {
        "label": "get_current_weather_prompt",
        "importPath": "services.location",
        "description": "services.location",
        "isExtraImport": true,
        "detail": "services.location",
        "documentation": {}
    },
    {
        "label": "make_stable_diffusion_background",
        "importPath": "services.stability_ai",
        "description": "services.stability_ai",
        "isExtraImport": true,
        "detail": "services.stability_ai",
        "documentation": {}
    },
    {
        "label": "upscale_stable_diffusion_background",
        "importPath": "services.stability_ai",
        "description": "services.stability_ai",
        "isExtraImport": true,
        "detail": "services.stability_ai",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"genwall-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"genwall-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"genwall-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"genwall-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"genwall-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "get_current_weather_prompt",
        "kind": 2,
        "importPath": "services.location",
        "description": "services.location",
        "peekOfCode": "def get_current_weather_prompt(latlng):\n    url = \"https://api.open-meteo.com/v1/forecast\"\n    params = {\n        \"latitude\": latlng[0],\n        \"longitude\": latlng[1],\n        \"current\": \"temperature_2m,wind_speed_10m\",\n    }\n    response = requests.get(url, params=params)\n    # Print the response in JSON format\n    return response.json()",
        "detail": "services.location",
        "documentation": {}
    },
    {
        "label": "make_stable_diffusion_background",
        "kind": 2,
        "importPath": "services.stability_ai",
        "description": "services.stability_ai",
        "peekOfCode": "def make_stable_diffusion_background(prompt):\n    api_key = os.getenv(\"STABILITY_AI_API_KEY\")\n    response = requests.post(\n        \"https://api.stability.ai/v2beta/stable-image/generate/ultra\",\n        headers={\n            \"authorization\": f\"Bearer {api_key}\",\n            \"accept\": \"image/*\"\n        },\n        files={\"none\": ''},\n        data={",
        "detail": "services.stability_ai",
        "documentation": {}
    },
    {
        "label": "upscale_stable_diffusion_background",
        "kind": 2,
        "importPath": "services.stability_ai",
        "description": "services.stability_ai",
        "peekOfCode": "def upscale_stable_diffusion_background(filepath):\n    api_key = os.getenv(\"STABILITY_AI_API_KEY\")\n    stability_api = client.StabilityInference(\n        key=api_key,  # API Key reference.\n        # The name of the upscaling model we want to use.\n        upscale_engine=\"esrgan-v1-x2plus\",\n        # Available Upscaling Engines: esrgan-v1-x2plus\n        verbose=True,  # Print debug messages.\n    )\n    img = Image.open(filepath)",
        "detail": "services.stability_ai",
        "documentation": {}
    },
    {
        "label": "os.environ['STABILITY_HOST']",
        "kind": 5,
        "importPath": "services.stability_ai",
        "description": "services.stability_ai",
        "peekOfCode": "os.environ['STABILITY_HOST'] = 'grpc.stability.ai:443'\ndef make_stable_diffusion_background(prompt):\n    api_key = os.getenv(\"STABILITY_AI_API_KEY\")\n    response = requests.post(\n        \"https://api.stability.ai/v2beta/stable-image/generate/ultra\",\n        headers={\n            \"authorization\": f\"Bearer {api_key}\",\n            \"accept\": \"image/*\"\n        },\n        files={\"none\": ''},",
        "detail": "services.stability_ai",
        "documentation": {}
    },
    {
        "label": "update_background",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def update_background(style):\n    # Get location and weather info\n    g = geocoder.ip('me')\n    location = get_current_weather_prompt(g.latlng)\n    temperature = location[\"current\"][\"temperature_2m\"]\n    time = location[\"current\"][\"time\"]\n    # Make image\n    location_wildcard = [\n        \"Cafe\",\n        \"Bar\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "scheduled_background_change",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def scheduled_background_change():\n    print(\"Executing background update at:- \" + str(datetime.now()))\n    update_background(style_choice)\n# Update background when script is first run\nupdate_background(style_choice)\n# Then do it regularly\nschedule.every(cadence).minutes.do(scheduled_background_change)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "run_options",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "run_options = [\n    inquirer.List('style',\n        message=\"What style of background would you like to generate?\",\n        choices=[\n            'Space',\n            'Location-Based',\n            'Abstract',\n            'Mixed',\n        ],\n    ),",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "inquiry_answers",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "inquiry_answers = inquirer.prompt(run_options)\nstyle_choice = inquiry_answers['style']\ncadence_choice = inquiry_answers['cadence']\ncadence_choice_map = {\n    'Daily': 1440,\n    'Every 8 hours': 480,\n    'Every 4 hours': 240,\n    'Every 2 hours': 120,\n    'Hourly': 60,\n    'Every 30 minutes': 30,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "style_choice",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "style_choice = inquiry_answers['style']\ncadence_choice = inquiry_answers['cadence']\ncadence_choice_map = {\n    'Daily': 1440,\n    'Every 8 hours': 480,\n    'Every 4 hours': 240,\n    'Every 2 hours': 120,\n    'Hourly': 60,\n    'Every 30 minutes': 30,\n    'Every 15 minutes': 30,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cadence_choice",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "cadence_choice = inquiry_answers['cadence']\ncadence_choice_map = {\n    'Daily': 1440,\n    'Every 8 hours': 480,\n    'Every 4 hours': 240,\n    'Every 2 hours': 120,\n    'Hourly': 60,\n    'Every 30 minutes': 30,\n    'Every 15 minutes': 30,\n}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cadence_choice_map",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "cadence_choice_map = {\n    'Daily': 1440,\n    'Every 8 hours': 480,\n    'Every 4 hours': 240,\n    'Every 2 hours': 120,\n    'Hourly': 60,\n    'Every 30 minutes': 30,\n    'Every 15 minutes': 30,\n}\ncadence = cadence_choice_map[cadence_choice]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cadence",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "cadence = cadence_choice_map[cadence_choice]\ndef scheduled_background_change():\n    print(\"Executing background update at:- \" + str(datetime.now()))\n    update_background(style_choice)\n# Update background when script is first run\nupdate_background(style_choice)\n# Then do it regularly\nschedule.every(cadence).minutes.do(scheduled_background_change)\nwhile True:\n    schedule.run_pending()",
        "detail": "main",
        "documentation": {}
    }
]